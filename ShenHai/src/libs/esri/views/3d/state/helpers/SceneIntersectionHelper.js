// All material copyright ESRI, All Rights Reserved, unless otherwise specified.
// See https://js.arcgis.com/4.14/esri/copyright.txt for details.
//>>built
define("require exports ../../../../core/maybe ../../../../core/screenUtils ../../../../core/libs/gl-matrix-2/vec3 ../../../../core/libs/gl-matrix-2/vec3f64 ../../support/geometryUtils ../../support/stack ../../webgl-engine/lib/Intersector ../../webgl-engine/lib/intersectorUtils".split(" "),function(A,B,F,v,l,G,q,h,r,t){function C(d,a,b){for(var c=0;c<d.length;c++){var D=d[c];a&&!a(D)||b.push(D)}return b}function E(d){n||(n=new r(d));n.viewingMode=d;return n}Object.defineProperty(B,"__esModule",{value:!0});
A=function(){function d(a,b,c){this.viewingMode=a;this.layerProvider=b;this.view=c;this.tmpRay=q.ray.create();this.externalIntersectionHandlers=new Set;this.tolerance=r.DEFAULT_TOLERANCE;this.validateHUDIntersector=new r(this.viewingMode);this.validateHUDIntersector.options.hud=!1}d.prototype.intersectScreen=function(a,b){return this.intersectRay(this.getPickRay(a,this.tmpRay),E(this.viewingMode),b)};d.prototype.intersectScreenFreePointFallback=function(a,b){return this.intersectRayFreePointFallback(this.getPickRay(a,
this.tmpRay),b)};d.prototype.intersectRayFreePointFallback=function(a,b){return this.intersectRay(a,E(this.viewingMode),b)||this.intersectRayFreePointLocal(a,b)};d.prototype.intersectRay=function(a,b,c,d){b.options.selectionMode=!1;b.options.store=0;this.computeIntersection(a,b,d);return b.results.min?b.results.min.getIntersectionPoint(c):!1};d.prototype.getCenterRayWithSubpixelOffset=function(a,b,c,d){void 0===c&&(c=.5);void 0===d&&(d=.5);a.getRenderCenter(f,c,d);f[0]+=.0466;f[1]-=.0123;return q.ray.fromRenderAtEye(a,
f,b)};d.prototype.intersectIntersectorScreen=function(a,b,c){this.computeIntersection(this.getPickRay(a,this.tmpRay),b,c)};d.prototype.intersectToolIntersectorScreen=function(a,b,c){a=this.getPickRay(a,this.tmpRay);this.intersectToolIntersectorRay(a,b,c)};d.prototype.intersectToolIntersectorRay=function(a,b,c){b.options.selectionMode=!0;this.computeIntersection(a,b,c);var d=b.results.min;this.view.basemapTerrain&&this.view.basemapTerrain.isOpaque()||d.hasIntersectionPoint&&"TerrainRenderer"!==d.intersector||
(b.options.selectionMode=!1,this.computeIntersection(a,b,c))};d.prototype.setTolerance=function(a){void 0===a&&(a=r.DEFAULT_TOLERANCE);this.tolerance=a};d.prototype.addIntersectionHandler=function(a){this.externalIntersectionHandlers.add(a)};d.prototype.removeIntersectionHandler=function(a){this.externalIntersectionHandlers.delete(a)};d.prototype.getPickRay=function(a,b){void 0===b&&(b=q.ray.create());return q.ray.fromScreen(this.view.state.camera,a,b)};d.prototype.intersectRayFreePointLocal=function(a,
b){if("local"!==this.viewingMode)return!1;var c=this.view.dataExtent,d=Math.max(c.xmax-c.xmin,c.ymax-c.ymin,8*Math.max(c.xmax-c.xmin,c.ymax-c.ymin));if(0===d)return l.vec3.add(b,a.origin,l.vec3.normalize(h.sv3d.get(),a.direction)),!0;var e=this.view.state.camera,y=Math.max(0,c.xmin-e.eye[0],e.eye[0]-c.xmax),c=Math.max(0,c.ymin-e.eye[1],e.eye[1]-c.ymax),e=d/Math.max(1,Math.pow(Math.max(0,Math.log(d/(Math.abs(e.relativeElevation)+Number.MIN_VALUE))),2)),e=Math.max(e,Math.min(Math.sqrt(y*y+c*c),d)),
d=l.vec3.scale(h.sv3d.get(),a.direction,e/l.vec3.length(a.direction));l.vec3.add(b,a.origin,d);return!0};d.prototype.intersectElevationFromScreen=function(a,b,c){void 0===c&&(c=0);return this.intersectElevation(this.getPickRay(a,this.tmpRay),b,c)};d.prototype.intersectElevation=function(a,b,c){void 0===c&&(c=0);if("absolute"===b)return this.view.computeMapPointFromVec3d(this.view.renderCoordsHelper.intersectManifoldClosestSilhouette(a,c,z));var d=this.view.state.camera,e=v.castRenderScreenPointArray3(h.sv3d.get());
d.projectPoint(a.origin,e);var y=this.prepareFilters(null,u),g=this.view.slicePlane,f=g?t.sliceFilterPredicate(g):null,k=new r(this.viewingMode);k.options.store=0;var m=a.origin;0!==c&&(g=c/this.view.renderCoordsHelper.unitInMeters,"local"===this.viewingMode?m=l.vec3.set(h.sv3d.get(),a.origin[0],a.origin[1],a.origin[2]-g):(p&&p.offset===c||(p={offset:c,verticalOffset:new t.VerticalOffsetForGlobalViewingMode(c)}),k.options.verticalOffset=p.verticalOffset));var w=l.vec3.add(h.sv3d.get(),m,a.direction);
k.reset(m,w);k.point=e;k.camera=d;k.filterPredicate=null;switch(b){case "scene":k.intersect(y.layers,e,d,this.tolerance,null,function(a){return a.metadata&&a.metadata.isElevationSource});this.externalIntersectionHandlers.forEach(function(a){"I3S"!==a.type&&"Terrain"!==a.type||a.intersect(k,a.slicePlaneEnabled?f:null,m,w,e)});break;case "ground":this.externalIntersectionHandlers.forEach(function(a){"Terrain"===a.type&&a.intersect(k,a.slicePlaneEnabled?f:null,m,w,e)})}a=k.results.min;return a.getIntersectionPoint(z)?
(b=this.view.computeMapPointFromVec3d(z),d=this.view.basemapTerrain,"TerrainRenderer"===a.intersector&&d&&(b.z=d.getElevation(b)||0,b.z+=c),b):null};d.prototype.computeIntersection=function(a,b,c){var d=this,e=this.view.state.camera,f=v.castRenderScreenPointArray3(h.sv3d.get());e.projectPoint(a.origin,f);var g=this.prepareFilters(c,u);b.options.storeTerrainResults=g.filterLayerUid(t.TERRAIN_ID);b.options.selectOpaqueTerrainOnly=!c||!("include"in c||"exclude"in c);var r=a.origin,k=l.vec3.add(h.sv3d.get(),
a.origin,a.direction);b.reset(r,k);b.intersect(g.layers,f,e,this.tolerance);var m=(a=this.view.slicePlane)?t.sliceFilterPredicate(a):null;b.intersect(g.sliceableLayers,f,e,this.tolerance,m);var w=c&&(c.terrainLocationFeedbackEnabled||c.enableDraped);this.externalIntersectionHandlers.forEach(function(a){if(a.intersectionHandlerId===t.TERRAIN_ID){if(!w&&!g.filterLayerUid(t.TERRAIN_ID))return}else if(!g.filterLayerUid(a.intersectionHandlerId))return;a.intersect(b,a.slicePlaneEnabled?m:null,r,k,f)});
a=h.sv3d.get();if(c&&c.enableDraped&&b.results.terrain.getIntersectionPoint(a)){c=this.view._stage.renderView.getDrapedRenderer();var q=h.sv3d.get();this.view.renderCoordsHelper.fromRenderCoords(a,q,this.view.spatialReference);q[2]=this.view.basemapTerrain.getElevation(a)||0;c.intersect(b,q,g.filterRenderGeometry)}b.sortResults();c=b.results.hud;if(c.hasIntersectionPoint){var n=v.castRenderScreenPointArray3(h.sv3d.get()),x=h.sv3d.get(),p=h.sv3d.get();this.unprojectHUDResultRay(c.center,n,x,p);a=l.vec3.distance(c.center,
x)/l.vec3.distance(x,p)*.99;this.validateHUDIntersector.reset(x,p);this.validateHUDIntersector.intersect(g.layers,n,e,this.tolerance);this.validateHUDIntersector.intersect(g.sliceableLayers,n,e,this.tolerance,m);this.externalIntersectionHandlers.forEach(function(a){g.filterLayerUid(a.intersectionHandlerId)&&a.intersect(d.validateHUDIntersector,a.slicePlaneEnabled?m:null,x,p,n)});e=this.validateHUDIntersector.results.min;if(null==e.dist||a<=e.dist)b.results.min.copyFrom(c),b.results.all.splice(0,0,
c)}};d.prototype.prepareFilters=function(a,b){var c=[],d=[];this.layerProvider.forEachLayer(function(a){a.isPickable&&(a.isSliceable?d:c).push(a)});b.include=a&&a.include;b.exclude=a&&a.exclude;b.layers.length=0;b.sliceableLayers.length=0;C(c,b.filterLayer,b.layers);C(d,b.filterLayer,b.sliceableLayers);return b};d.prototype.unprojectHUDResultRay=function(a,b,c,d){var e=this.view.state.camera;e.projectPoint(a,b);a=v.castRenderScreenPointArray3(h.sv3d.get());a[0]=b[0];a[1]=b[1];a[2]=0;e.unprojectPoint(a,
c);a[2]=1;e.unprojectPoint(a,d)};return d}();B.SceneIntersectionHelper=A;var n,u={include:null,exclude:null,layers:[],sliceableLayers:[],filterLayer:function(d){return u.filterLayerUid(d.apiLayerUid)},filterLayerUid:function(d){var a=u.include,b=u.exclude;return F.isNone(d)?null==a&&null==b:(null==a||a.has(d))&&(null==b||!b.has(d))},filterRenderGeometry:function(d){return u.filterLayerUid(d.data.layerUid)}},z=G.vec3f64.create(),f=v.createRenderScreenPointArray(),p=null});